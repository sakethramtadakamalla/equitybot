# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OJrZvU5OeaFy76QMR0pfRtAIOcPmjaH-
"""

import os
import requests
import pandas as pd
import numpy as np
import matplotlib
matplotlib.use('Agg') # Add this line
import matplotlib.pyplot as plt
from datetime import datetime
from bs4 import BeautifulSoup
import yfinance as yf
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import A4
from reportlab.lib.utils import ImageReader
from reportlab.lib.colors import black, blue, green, orange, red, white, gray, lightgrey
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, Image, PageBreak
from reportlab.lib.enums import TA_CENTER, TA_JUSTIFY
from reportlab.lib.units import inch
from io import BytesIO
from flask import Flask, render_template, request, jsonify, send_from_directory

# ------------------------
# Flask App Initialization
# ------------------------
app = Flask(__name__)
OUTPUT_FOLDER = 'outputs'
os.makedirs(OUTPUT_FOLDER, exist_ok=True)

# ------------------------
# DATA FOR THE FRONT-END
# ------------------------
# This dictionary powers the dropdown menus on your website.
SECTOR_STOCK_MAPPING = {
    "Banking & Financials": [
        {"name": "HDFC Bank", "ticker": "HDFCBANK.NS"},
        {"name": "ICICI Bank", "ticker": "ICICIBANK.NS"},
        {"name": "State Bank of India", "ticker": "SBIN.NS"},
        {"name": "Kotak Mahindra Bank", "ticker": "KOTAKBANK.NS"},
        {"name": "Axis Bank", "ticker": "AXISBANK.NS"},
        {"name": "Bajaj Finance", "ticker": "BAJFINANCE.NS"},
    ],
    "IT": [
        {"name": "Infosys", "ticker": "INFY.NS"},
        {"name": "TCS", "ticker": "TCS.NS"},
        {"name": "Wipro", "ticker": "WIPRO.NS"},
        {"name": "Tech Mahindra", "ticker": "TECHM.NS"},
        {"name": "HCL Technologies", "ticker": "HCLTECH.NS"},
    ],
    "Energy": [
        {"name": "Reliance Industries", "ticker": "RELIANCE.NS"},
        {"name": "ONGC", "ticker": "ONGC.NS"},
        {"name": "NTPC", "ticker": "NTPC.NS"},
        {"name": "Power Grid", "ticker": "POWERGRID.NS"},
        {"name": "Adani Power", "ticker": "ADANIPOWER.NS"},
        {"name": "Tata Power", "ticker": "TATAPOWER.NS"},
    ],
    "Automobiles": [
        {"name": "Tata Motors", "ticker": "TATAMOTORS.NS"},
        {"name": "Mahindra and Mahindra", "ticker": "M&M.NS"},
        {"name": "Maruti Suzuki", "ticker": "MARUTI.NS"},
        {"name": "Eicher Motors", "ticker": "EICHERMOT.NS"},
        {"name": "Bajaj Auto", "ticker": "BAJAJ-AUTO.NS"},
    ],
}

# ======================================================================
# ALL OF YOUR ORIGINAL CODE GOES HERE, INSIDE FUNCTIONS
# I have taken your script and organized it into the functions below.
# ======================================================================

def fetch_price(symbol, period="3y"):
    """Fetches historical price data."""
    print(f"Fetching {period} price data for {symbol}...")
    df = yf.download(symbol, period=period, interval="1d", progress=False, auto_adjust=True)
    if df.empty:
        print(f"Warning: Could not fetch price data for {symbol}.")
        return None
    df['close'] = df['Close']
    return df

def compute_technical_indicators(df):
    """Computes all technical indicators for the given dataframe."""
    if df is None: return None
    window = 20
    df['bb_mid'] = df['close'].rolling(window).mean()
    df['bb_std'] = df['close'].rolling(window).std()
    df['bb_upper'] = df['bb_mid'] + 2 * df['bb_std']
    df['bb_lower'] = df['bb_mid'] - 2 * df['bb_std']
    fast, slow, signal = 12, 26, 9
    df['ema_fast'] = df['close'].ewm(span=fast, adjust=False).mean()
    df['ema_slow'] = df['close'].ewm(span=slow, adjust=False).mean()
    df['macd_line'] = df['ema_fast'] - df['ema_slow']
    df['macd_signal'] = df['macd_line'].ewm(span=signal, adjust=False).mean()
    df['macd_hist'] = df['macd_line'] - df['macd_signal']
    delta = df['close'].diff()
    gain = (delta.where(delta > 0, 0)).rolling(window=14).mean()
    loss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()
    rs = gain / loss.replace(0, 1e-9)
    df['rsi'] = 100 - (100 / (1 + rs))
    df['sma_50'] = df['close'].rolling(window=50).mean()
    df['sma_200'] = df['close'].rolling(window=200).mean()
    return df

def fetch_company_info(symbol):
    """Fetches comprehensive company information."""
    print(f"Fetching fundamental data for {symbol}...")
    try:
        ticker = yf.Ticker(symbol)
        info = ticker.info
        currency_symbol = '₹'
        unit_divisor = 1e7
        unit_label = ' Cr'
        data = {
            'Symbol': symbol, 'Company Name': info.get('longName', 'N/A'),
            'Sector': info.get('sector', 'N/A'), 'Industry': info.get('industry', 'N/A'),
            'Description': info.get('longBusinessSummary', 'No description available.'),
            'Market Cap': f"{currency_symbol}{info.get('marketCap', 0) / unit_divisor:,.2f}{unit_label}",
            'Current Price': f"{currency_symbol}{info.get('currentPrice', 'N/A')}",
            '52 Week Range': f"{info.get('fiftyTwoWeekLow', 'N/A')} - {info.get('fiftyTwoWeekHigh', 'N/A')}",
            'Trailing PE': info.get('trailingPE'),
            'ROE': info.get('returnOnEquity'),
        }
        return data
    except Exception as e:
        print(f"Error fetching fundamental data for {symbol}: {e}")
        return None

def fetch_news_google(company_name, limit=5):
    """Fetches news from Google."""
    print(f"Fetching latest news for {company_name}...")
    news = []
    try:
        query = f"\"{company_name}\" stock news"
        url = f"https://www.google.com/search?q={requests.utils.quote(query)}&tbm=nws&num={limit+5}"
        headers = {"User-Agent": "Mozilla/5.0"}
        r = requests.get(url, headers=headers, timeout=10)
        soup = BeautifulSoup(r.text, "lxml")
        articles = soup.find_all("div", class_="SoaBEf")
        for article in articles:
            if len(news) >= limit: break
            title_elem = article.find("div", role="heading")
            link_elem = article.find("a")
            source_elem = article.find("div", class_="NUnG9d")
            if all([title_elem, link_elem, source_elem]):
                news.append({'title': title_elem.text.strip(), 'publisher': source_elem.text.strip()})
    except Exception as e:
        print(f"Error fetching news from Google: {e}")
    return news

def generate_pdf_report(fundamentals, price_df, news):
    """Builds and saves the final PDF report."""
    stock_name = fundamentals.get('Symbol', 'STOCK')
    filename = f"{stock_name.replace('.', '_')}_Report_{datetime.now().strftime('%Y%m%d')}.pdf"
    filepath = os.path.join(OUTPUT_FOLDER, filename)
    doc = SimpleDocTemplate(filepath, pagesize=A4, rightMargin=inch*0.5, leftMargin=inch*0.5, topMargin=inch*0.5, bottomMargin=inch*0.5)
    story = []
    styles = getSampleStyleSheet()
    styles.add(ParagraphStyle(name='Justify', alignment=TA_JUSTIFY, leading=14))

    # --- PDF Content ---
    story.append(Paragraph(f"Equity Research Report: {fundamentals.get('Company Name', '')}", styles['h1']))
    story.append(Paragraph(f"Date: {datetime.now().strftime('%d %B %Y')}", styles['h2']))
    story.append(Spacer(1, 12))

    header_data = [
        [f"Symbol:", fundamentals.get('Symbol', 'N/A')],
        [f"Current Price:", fundamentals.get('Current Price', 'N/A')],
        [f"Market Cap:", fundamentals.get('Market Cap', 'N/A')],
        [f"P/E Ratio:", f"{fundamentals.get('Trailing PE'):.2f}" if fundamentals.get('Trailing PE') else 'N/A'],
        [f"Return on Equity:", f"{fundamentals.get('ROE')*100:.2f}%" if fundamentals.get('ROE') else 'N/A']
    ]
    header_table = Table(header_data, colWidths=[1.5*inch, 4.5*inch])
    header_table.setStyle(TableStyle([('FONTNAME', (0,0), (0,-1), 'Helvetica-Bold')]))
    story.append(header_table)
    story.append(Spacer(1, 12))

    story.append(Paragraph("Company Overview", styles['h3']))
    story.append(Paragraph(fundamentals.get('Description', 'N/A'), styles['Justify']))
    story.append(Spacer(1, 12))

    story.append(Paragraph("Price Chart & Technicals (3-Year)", styles['h3']))
    try:
        fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(8, 6), gridspec_kw={'height_ratios': [3, 1]})
        ax1.plot(price_df.index, price_df['close'], label='Close Price', color='blue')
        ax1.plot(price_df.index, price_df['sma_50'], label='50-Day SMA', color='orange', linestyle='--')
        ax1.plot(price_df.index, price_df['sma_200'], label='200-Day SMA', color='red', linestyle='--')
        ax1.set_title(f"{stock_name} Price and Moving Averages"); ax1.grid(True); ax1.legend()

        ax2.plot(price_df.index, price_df['rsi'], label='RSI', color='purple')
        ax2.axhline(70, linestyle='--', color='red'); ax2.axhline(30, linestyle='--', color='green')
        ax2.set_title("Relative Strength Index (RSI)"); ax2.grid(True)

        plt.tight_layout()
        img_buffer = BytesIO()
        fig.savefig(img_buffer, format='png', dpi=300); plt.close(fig)
        img_buffer.seek(0)
        story.append(Image(img_buffer, width=7*inch, height=5.25*inch))
    except Exception as e:
        story.append(Paragraph(f"Could not generate chart: {e}", styles['Normal']))
    story.append(Spacer(1, 12))

    story.append(Paragraph("Recent News", styles['h3']))
    for n in news:
        story.append(Paragraph(f"• <b>{n['title']}</b> <i>({n['publisher']})</i>", styles['Normal']))

    doc.build(story)
    return filename

def create_report(stock_ticker):
    """This function runs the full analysis for one stock."""
    symbol = stock_ticker

    # 1. Fetch Data
    fundamentals = fetch_company_info(symbol)
    if not fundamentals:
        raise ValueError(f"Could not get data for {symbol}. It might be an invalid ticker.")

    price_df = fetch_price(symbol)
    if price_df is None:
        raise ValueError(f"Could not get price history for {symbol}.")

    # 2. Compute Indicators & Fetch News
    price_df_tech = compute_technical_indicators(price_df)
    news = fetch_news_google(fundamentals.get('Company Name', symbol))

    # 3. Generate PDF Report
    pdf_filename = generate_pdf_report(fundamentals, price_df_tech, news)
    return pdf_filename

# ======================================================================
# FLASK WEB ROUTES (The part that makes it a website)
# ======================================================================

@app.route('/')
def index():
    """Renders the main page."""
    return render_template('index.html')

@app.route('/api/stocks')
def get_stocks():
    """API endpoint to provide stock data to the frontend."""
    return jsonify(SECTOR_STOCK_MAPPING)

@app.route('/generate', methods=['POST'])
def generate():
    """Handles the report generation request from the website."""
    try:
        stock_ticker = request.form['stock_select']
        if not stock_ticker:
            return jsonify({'error': 'No stock selected.'}), 400

        pdf_filename = create_report(stock_ticker)
        return jsonify({'download_url': f"/download/{pdf_filename}"})

    except ValueError as e:
        return jsonify({'error': str(e)}), 400
    except Exception as e:
        print(f"An unexpected error occurred: {e}") # For your own debugging
        return jsonify({'error': 'An internal server error occurred. Please try again later.'}), 500

@app.route('/download/<filename>')
def download_file(filename):
    """Serves the generated PDF file for download."""
    return send_from_directory(OUTPUT_FOLDER, filename, as_attachment=True)

if __name__ == "__main__":
    app.run(debug=True)