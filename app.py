# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OJrZvU5OeaFy76QMR0pfRtAIOcPmjaH-
"""

import os
import requests
import pandas as pd
import numpy as np
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
from datetime import datetime
import yfinance as yf
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import A4, letter
from reportlab.lib.utils import ImageReader
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, Image, PageBreak, Frame, PageTemplate
from reportlab.lib.enums import TA_CENTER, TA_JUSTIFY, TA_LEFT, TA_RIGHT
from reportlab.lib.units import inch
from io import BytesIO
from flask import Flask, render_template, request, jsonify, send_from_directory

# --- Flask App Initialization ---
app = Flask(__name__)
OUTPUT_FOLDER = 'outputs'
os.makedirs(OUTPUT_FOLDER, exist_ok=True)

# --- Data for Front-End & Peer Analysis ---
SECTOR_STOCK_MAPPING = {
    "Banking & Financials": [{"name": "HDFC Bank", "ticker": "HDFCBANK.NS"}, {"name": "ICICI Bank", "ticker": "ICICIBANK.NS"}, {"name": "State Bank of India", "ticker": "SBIN.NS"}, {"name": "Kotak Mahindra Bank", "ticker": "KOTAKBANK.NS"}, {"name": "Axis Bank", "ticker": "AXISBANK.NS"}, {"name": "Bajaj Finance", "ticker": "BAJFINANCE.NS"}],
    "IT": [{"name": "Infosys", "ticker": "INFY.NS"}, {"name": "TCS", "ticker": "TCS.NS"}, {"name": "Wipro", "ticker": "WIPRO.NS"}, {"name": "Tech Mahindra", "ticker": "TECHM.NS"}, {"name": "HCL Technologies", "ticker": "HCLTECH.NS"}],
    "Energy": [{"name": "Reliance Industries", "ticker": "RELIANCE.NS"}, {"name": "ONGC", "ticker": "ONGC.NS"}, {"name": "NTPC", "ticker": "NTPC.NS"}, {"name": "Power Grid", "ticker": "POWERGRID.NS"}, {"name": "Adani Power", "ticker": "ADANIPOWER.NS"}, {"name": "Tata Power", "ticker": "TATAPOWER.NS"}],
    "Automobiles": [{"name": "Tata Motors", "ticker": "TATAMOTORS.NS"}, {"name": "Mahindra and Mahindra", "ticker": "M&M.NS"}, {"name": "Maruti Suzuki", "ticker": "MARUTI.NS"}, {"name": "Eicher Motors", "ticker": "EICHERMOT.NS"}, {"name": "Bajaj Auto", "ticker": "BAJAJ-AUTO.NS"}]
}
PEER_MAPPING = {
    "HDFCBANK.NS": ["ICICIBANK.NS", "SBIN.NS", "AXISBANK.NS", "KOTAKBANK.NS"], "ICICIBANK.NS": ["HDFCBANK.NS", "AXISBANK.NS", "KOTAKBANK.NS", "SBIN.NS"], "SBIN.NS": ["HDFCBANK.NS", "ICICIBANK.NS", "PNB.NS", "BANKBARODA.NS"],
    "INFY.NS": ["TCS.NS", "WIPRO.NS", "TECHM.NS", "HCLTECH.NS"], "TCS.NS": ["INFY.NS", "WIPRO.NS", "HCLTECH.NS", "TECHM.NS"],
    "RELIANCE.NS": ["ONGC.NS", "TATAPOWER.NS", "ADANIPOWER.NS"], "TATAMOTORS.NS": ["MARUTI.NS", "M&M.NS", "EICHERMOT.NS"]
}

# ======================================================================
# DATA FETCHING AND ANALYSIS FUNCTIONS (PITCH-PERFECT VERSION)
# ======================================================================

def get_scalar(value):
    if isinstance(value, pd.Series): return value.iloc[0] if not value.empty else None
    return value

def fetch_logo(info):
    try:
        if 'logo_url' in info and info['logo_url']:
            response = requests.get(info['logo_url'], stream=True, timeout=5)
            if response.status_code == 200: return ImageReader(BytesIO(response.content))
    except Exception as e:
        print(f"Could not fetch logo: {e}")
    return None

def fetch_price(symbol, period="3y"):
    df = yf.download(symbol, period=period, interval="1d", progress=False, auto_adjust=True)
    return df if not df.empty else None

def compute_technical_indicators(df):
    if df is None: return None
    df['sma_50'] = df['Close'].rolling(window=50).mean()
    df['sma_200'] = df['Close'].rolling(window=200).mean()
    df['bb_mid'] = df['Close'].rolling(window=20).mean()
    df['bb_std'] = df['Close'].rolling(window=20).std()
    df['bb_upper'] = df['bb_mid'] + 2 * df['bb_std']
    df['bb_lower'] = df['bb_mid'] - 2 * df['bb_std']
    df['ema_12'] = df['Close'].ewm(span=12, adjust=False).mean()
    df['ema_26'] = df['Close'].ewm(span=26, adjust=False).mean()
    df['macd_line'] = df['ema_12'] - df['ema_26']
    df['macd_signal'] = df['macd_line'].ewm(span=9, adjust=False).mean()
    df['macd_hist'] = df['macd_line'] - df['macd_signal']
    delta = df['Close'].diff()
    gain = (delta.where(delta > 0, 0)).rolling(window=14).mean()
    loss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()
    rs = gain / loss.replace(0, 1e-9)
    df['rsi'] = 100 - (100 / (1 + rs))
    return df

def fetch_company_info(symbol):
    try:
        ticker = yf.Ticker(symbol)
        info = ticker.info
        unit_divisor = 1e7
        logo_image = fetch_logo(info)
        return {
            'info': info, 'logo_image': logo_image,
            'Symbol': symbol, 'Company Name': info.get('longName', 'N/A'),
            'Description': info.get('longBusinessSummary', 'N/A'),
            'Market Cap': f"₹{info.get('marketCap', 0) / unit_divisor:,.2f} Cr", 'Current Price': f"₹{info.get('currentPrice', 'N/A')}",
            'Trailing PE': info.get('trailingPE'), 'Forward PE': info.get('forwardPE'), 'Price/Book': info.get('priceToBook'),
            'ROE': info.get('returnOnEquity'), 'Profit Margin': info.get('profitMargins'), 'Debt to Equity': info.get('debtToEquity'),
            'Current Ratio': info.get('currentRatio'), 'Dividend Yield': info.get('dividendYield'),
            'companyOfficers': info.get('companyOfficers', [])
        }
    except Exception as e:
        print(f"Error fetching fundamental data for {symbol}: {e}")
        return None

def fetch_news_yfinance(symbol, limit=8):
    news = []
    try:
        ticker = yf.Ticker(symbol)
        news_data = ticker.news
        for item in news_data[:limit]:
            news.append({'title': item.get('title', 'N/A'), 'publisher': item.get('publisher', 'N/A')})
    except Exception as e:
        print(f"Error fetching news from yfinance: {e}")
    return news

def get_peer_comparison(peers):
    peer_details = []
    for peer_symbol in peers:
        try:
            info = yf.Ticker(peer_symbol).info
            peer_details.append({'name': info.get('shortName', peer_symbol), 'pe': info.get('trailingPE'), 'roe': info.get('returnOnEquity')})
        except Exception:
            continue
    return pd.DataFrame(peer_details)

def interpret_technical(df):
    analysis = []
    if df is None or df.empty: return ["Technical data not available."]
    latest = df.iloc[-1]

    sma_50 = get_scalar(latest.get('sma_50'))
    sma_200 = get_scalar(latest.get('sma_200'))
    close_price = get_scalar(latest.get('Close'))
    bb_upper = get_scalar(latest.get('bb_upper'))
    macd_line = get_scalar(latest.get('macd_line'))
    macd_signal = get_scalar(latest.get('macd_signal'))
    rsi = get_scalar(latest.get('rsi'))

    if sma_50 is not None and sma_200 is not None:
        analysis.append("<b>Trend (SMA):</b> " + ("Bullish (Golden Cross)" if sma_50 > sma_200 else "Bearish (Death Cross)"))
    if bb_upper is not None and close_price is not None:
        analysis.append("<b>Volatility (Bollinger):</b> " + ("High (Price above upper band)" if close_price > bb_upper else "Normal"))
    if macd_line is not None and macd_signal is not None:
        analysis.append("<b>Momentum (MACD):</b> " + ("Positive (MACD above signal)" if macd_line > macd_signal else "Negative (MACD below signal)"))
    if rsi is not None:
        analysis.append(f"<b>Strength (RSI):</b> {('Overbought' if rsi > 70 else 'Oversold' if rsi < 30 else 'Neutral')} at {rsi:.2f}")

    return analysis

def interpret_fundamental(fundamentals):
    analysis = []
    if fundamentals.get('Trailing PE'): analysis.append(f"<b>Valuation (P/E):</b> {'High' if fundamentals['Trailing PE'] > 30 else 'Low' if fundamentals['Trailing PE'] < 15 else 'Fair'} at {fundamentals['Trailing PE']:.2f}")
    if fundamentals.get('ROE'): analysis.append(f"<b>Profitability (ROE):</b> {'Strong' if fundamentals['ROE'] > 0.15 else 'Moderate'} at {fundamentals['ROE']*100:.2f}%")
    de = fundamentals.get('Debt to Equity')
    if de is not None: analysis.append(f"<b>Health (D/E):</b> {'High Risk' if de > 150 else 'Manageable'} at {de:.2f}")
    return analysis

def generate_recommendation(fundamentals, tech_analysis):
    score = 0
    if fundamentals.get('ROE') and fundamentals['ROE'] > 0.15: score += 1
    if fundamentals.get('Trailing PE') and fundamentals['Trailing PE'] < 30: score += 1
    if fundamentals.get('Debt to Equity') is not None and fundamentals['Debt to Equity'] < 150: score += 1
    if any("Bullish" in s for s in tech_analysis): score += 1
    if any("Overbought" in s for s in tech_analysis): score -= 1
    if score >= 3: return "BUY"
    if score >= 1: return "HOLD"
    return "SELL"

# --- PDF Generation Engine ---
class ReportPDF:
    def __init__(self, filepath, fundamentals):
        self.doc = SimpleDocTemplate(filepath, pagesize=A4, rightMargin=inch*0.5, leftMargin=inch*0.5, topMargin=inch*0.5, bottomMargin=inch*0.5)
        self.styles = getSampleStyleSheet()
        self.styles.add(ParagraphStyle(name='Justify', alignment=TA_JUSTIFY, leading=14))
        self.story = []
        self.fundamentals = fundamentals

    def draw_border(self, canvas, doc):
        canvas.saveState()
        canvas.setStrokeColor(colors.HexColor('#000080')) # Navy Blue
        canvas.setLineWidth(3)
        canvas.rect(doc.leftMargin, doc.bottomMargin, doc.width, doc.height)
        canvas.restoreState()

    def add_title_page(self):
        self.story.append(Spacer(1, 2*inch))
        logo_image = self.fundamentals.get('logo_image')
        if logo_image:
            logo_image.drawWidth = 1.5*inch; logo_image.drawHeight = 1.5*inch
            self.story.append(logo_image)
            self.story.append(Spacer(1, 0.25*inch))

        self.story.append(Paragraph("Saketh Equity Research", self.styles['Title']))
        self.story.append(Spacer(1, 0.5*inch))
        self.story.append(Paragraph(f"Professional Equity Report For:", ParagraphStyle(name='sub', parent=self.styles['h2'], alignment=TA_CENTER)))
        self.story.append(Paragraph(self.fundamentals.get('Company Name', ''), ParagraphStyle(name='main', parent=self.styles['h1'], alignment=TA_CENTER)))
        self.story.append(Spacer(1, 0.2*inch))
        self.story.append(Paragraph(f"Ticker: {self.fundamentals.get('Symbol', '')}", ParagraphStyle(name='ticker', parent=self.styles['h2'], alignment=TA_CENTER)))
        self.story.append(Spacer(1, 2*inch))
        self.story.append(Paragraph(f"Report Generated: {datetime.now().strftime('%A, %B %d, %Y')}", self.styles['Normal']))
        self.story.append(PageBreak())

    def add_main_content(self, price_df, news, peer_df, tech_analysis, fund_analysis, recommendation):
        navy_blue_header_style = TableStyle([('BACKGROUND', (0,0), (-1,0), colors.HexColor('#000080')), ('TEXTCOLOR', (0,0), (-1,0), colors.whitesmoke), ('ALIGN', (0,0), (-1,-1), 'CENTER'), ('FONTNAME', (0,0), (-1,0), 'Helvetica-Bold'), ('BOTTOMPADDING', (0,0), (-1,0), 12), ('GRID', (0,0), (-1,-1), 1, colors.black)])

        rec_color = {'BUY': colors.green, 'HOLD': colors.orange, 'SELL': colors.red}.get(recommendation, colors.black)
        rec_style = ParagraphStyle(name='Recommendation', parent=self.styles['h1'], alignment=TA_RIGHT, textColor=rec_color)
        header_data = [[Paragraph(f"<b>Current Price:</b> {self.fundamentals.get('Current Price', 'N/A')}<br/><b>Market Cap:</b> {self.fundamentals.get('Market Cap', 'N/A')}", self.styles['Normal']), Paragraph(recommendation, rec_style)]]
        self.story.append(Table(header_data, colWidths=[4*inch, 2.5*inch], style=[('VALIGN', (0,0), (-1,-1), 'MIDDLE')]))
        self.story.append(Spacer(1, 12))

        self.story.append(Paragraph("Company Overview", self.styles['h3']))
        self.story.append(Paragraph(self.fundamentals.get('Description', 'N/A'), self.styles['Justify']))
        self.story.append(Spacer(1, 12))

        self.story.append(Paragraph("Key Managerial Personnel", self.styles['h3']))
        officers = self.fundamentals.get('companyOfficers', [])
        if officers:
            for officer in officers:
                if 'name' in officer and 'title' in officer: self.story.append(Paragraph(f"• <b>{officer['name']}</b>, <i>{officer['title']}</i>", self.styles['Normal']))
        else:
            self.story.append(Paragraph("Data not available.", self.styles['Normal']))
        self.story.append(PageBreak())

        self.story.append(Paragraph("Analysis Summary", self.styles['h3']))
        analysis_data = [
            [Paragraph("<b>Technical Summary</b>", self.styles['Normal']), Paragraph("<b>Fundamental Summary</b>", self.styles['Normal'])],
            [Paragraph("<br/>".join([f"• {item}" for item in tech_analysis]), self.styles['Normal']), Paragraph("<br/>".join([f"• {item}" for item in fund_analysis]), self.styles['Normal'])]
        ]
        self.story.append(Table(analysis_data, colWidths=[3.25*inch, 3.25*inch], style=[('GRID', (0,0), (-1,-1), 1, colors.black), ('VALIGN', (0,0), (-1,-1), 'TOP'), ('LEFTPADDING', (0,0), (-1,-1), 6), ('BACKGROUND', (0,0), (-1,0), colors.HexColor('#000080')), ('TEXTCOLOR', (0,0), (-1,0), colors.whitesmoke)]))
        self.story.append(Spacer(1, 12))

        self.story.append(Paragraph("Technical Charts (3-Year)", self.styles['h3']))
        try:
            fig, (ax1, ax2, ax3) = plt.subplots(3, 1, figsize=(8, 9), gridspec_kw={'height_ratios': [3, 1, 1]})
            ax1.plot(price_df.index, price_df['Close'], label='Close Price', color='blue', linewidth=1.5)
            ax1.plot(price_df.index, price_df['sma_50'], label='50-Day SMA', color='orange', linestyle='--'); ax1.plot(price_df.index, price_df['sma_200'], label='200-Day SMA', color='red', linestyle='--')
            ax1.fill_between(price_df.index, price_df['bb_upper'], price_df['bb_lower'], color='gray', alpha=0.1)
            ax1.set_ylabel('Price (₹)'); ax1.legend(); ax1.grid(True, linestyle='--', alpha=0.6)
            ax2.plot(price_df.index, price_df['macd_line'], label='MACD', color='green'); ax2.plot(price_df.index, price_df['macd_signal'], label='Signal', color='red', linestyle='--')
            ax2.bar(price_df.index, price_df['macd_hist'], label='Histogram', color='gray', alpha=0.5)
            ax2.set_ylabel('MACD'); ax2.legend(); ax2.grid(True, linestyle='--', alpha=0.6)
            ax3.plot(price_df.index, price_df['rsi'], label='RSI', color='purple')
            ax3.axhline(70, linestyle='--', color='red'); ax3.axhline(30, linestyle='--', color='green')
            ax3.set_ylabel('RSI'); ax3.legend(); ax3.grid(True, linestyle='--', alpha=0.6)
            for ax in [ax1, ax2, ax3]:
                ax.tick_params(axis='x', labelsize=8, rotation=30, ha='right'); ax.tick_params(axis='y', labelsize=8)
            plt.tight_layout()
            img_buffer = BytesIO(); fig.savefig(img_buffer, format='png', dpi=300); plt.close(fig)
            self.story.append(Image(img_buffer, width=7*inch, height=7.5*inch))
        except Exception as e:
            self.story.append(Paragraph(f"Could not generate charts: {e}", self.styles['Normal']))
        self.story.append(PageBreak())

        self.story.append(Paragraph("Key Metrics & Financial Ratios", self.styles['h3']))
        ratios_data = [['Metric', 'Value'], ['Trailing P/E', f"{self.fundamentals.get('Trailing PE'):.2f}" if self.fundamentals.get('Trailing PE') else 'N/A'], ['Price/Book (P/B)', f"{self.fundamentals.get('Price/Book'):.2f}" if self.fundamentals.get('Price/Book') else 'N/A'], ['Return on Equity (ROE)', f"{self.fundamentals.get('ROE')*100:.2f}%" if self.fundamentals.get('ROE') else 'N/A'], ['Profit Margin', f"{self.fundamentals.get('Profit Margin')*100:.2f}%" if self.fundamentals.get('Profit Margin') else 'N/A'], ['Debt to Equity', f"{self.fundamentals.get('Debt to Equity'):.2f}" if self.fundamentals.get('Debt to Equity') is not None else 'N/A'], ['Dividend Yield', f"{self.fundamentals.get('Dividend Yield')*100:.2f}%" if self.fundamentals.get('Dividend Yield') else 'N/A']]
        self.story.append(Table(ratios_data, style=navy_blue_header_style, colWidths=[3.25*inch, 3.25*inch]))
        self.story.append(Spacer(1, 12))

        self.story.append(Paragraph("Peer Comparison", self.styles['h3']))
        if not peer_df.empty:
            peer_data = [['Company', 'P/E Ratio', 'Return on Equity (ROE)']]
            for index, row in peer_df.iterrows(): peer_data.append([row['name'], f"{row['pe']:.2f}" if pd.notna(row['pe']) else 'N/A', f"{row['roe']*100:.2f}%" if pd.notna(row['roe']) else 'N/A'])
            self.story.append(Table(peer_data, style=navy_blue_header_style))
        else:
            self.story.append(Paragraph("No peer data available.", self.styles['Normal']))
        self.story.append(PageBreak())

        self.story.append(Paragraph("Recent News", self.styles['h3']))
        for n in news: self.story.append(Paragraph(f"• <b>{n['title']}</b> <i>({n['publisher']})</i>", self.styles['Normal']))
        self.story.append(Spacer(1, 12))

    def add_disclaimer(self):
        self.story.append(Paragraph("Disclaimer", self.styles['h3']))
        disclaimer_text = "This report is for informational purposes only and does not constitute a recommendation to buy or sell any security. The information contained herein has been obtained from sources believed to be reliable, but its accuracy and completeness are not guaranteed. Saketh Equity Research is not a registered investment advisor. All investment decisions should be made with the help of a qualified financial professional. Past performance is not indicative of future results."
        self.story.append(Paragraph(disclaimer_text, self.styles['Justify']))

    def generate(self):
        self.doc.build(self.story, onFirstPage=self.draw_border, onLaterPages=self.draw_border)

# ======================================================================
# FLASK WEB ROUTES
# ======================================================================

def create_report(stock_ticker):
    symbol = stock_ticker
    fundamentals = fetch_company_info(symbol)
    if not fundamentals: raise ValueError(f"Could not get data for {symbol}.")

    price_df = fetch_price(symbol)
    if price_df is None: raise ValueError(f"Could not get price history for {symbol}.")

    price_df_tech = compute_technical_indicators(price_df)
    tech_analysis = interpret_technical(price_df_tech)
    fund_analysis = interpret_fundamental(fundamentals)
    recommendation = generate_recommendation(fundamentals, tech_analysis)

    peers = PEER_MAPPING.get(symbol, [])
    peer_df = get_peer_comparison(peers)
    news = fetch_news_yfinance(symbol)

    filename = f"{symbol.replace('.', '_')}_Pro_Report_{datetime.now().strftime('%Y%m%d')}.pdf"
    filepath = os.path.join(OUTPUT_FOLDER, filename)

    pdf = ReportPDF(filepath, fundamentals)
    pdf.add_title_page()
    pdf.add_main_content(price_df, news, peer_df, tech_analysis, fund_analysis, recommendation)
    pdf.add_disclaimer()
    pdf.generate()

    return filename

@app.route('/')
def index(): return render_template('index.html')

@app.route('/api/stocks')
def get_stocks(): return jsonify(SECTOR_STOCK_MAPPING)

@app.route('/generate', methods=['POST'])
def generate():
    try:
        stock_ticker = request.form['stock_select']
        if not stock_ticker: return jsonify({'error': 'No stock selected.'}), 400
        pdf_filename = create_report(stock_ticker)
        return jsonify({'download_url': f"/download/{pdf_filename}"})
    except ValueError as e:
        return jsonify({'error': str(e)}), 400
    except Exception as e:
        print(f"An unexpected error occurred: {e}")
        return jsonify({'error': 'An internal server error occurred. Please try again later.'}), 500

@app.route('/download/<filename>')
def download_file(filename):
    return send_from_directory(OUTPUT_FOLDER, filename, as_attachment=True)

if __name__ == "__main__":
    app.run(debug=True)