# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OJrZvU5OeaFy76QMR0pfRtAIOcPmjaH-
"""

import os
import requests
import pandas as pd
import numpy as np
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
from datetime import datetime
import yfinance as yf
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import A4
from reportlab.lib.utils import ImageReader
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, Image, PageBreak
from reportlab.lib.enums import TA_CENTER, TA_JUSTIFY, TA_LEFT, TA_RIGHT
from reportlab.lib.units import inch
from io import BytesIO
from flask import Flask, render_template, request, jsonify, send_from_directory

# ------------------------
# Flask App Initialization
# ------------------------
app = Flask(__name__)
OUTPUT_FOLDER = 'outputs'
os.makedirs(OUTPUT_FOLDER, exist_ok=True)

# ------------------------
# DATA FOR THE FRONT-END & PEER ANALYSIS
# ------------------------
SECTOR_STOCK_MAPPING = {
    "Banking & Financials": [
        {"name": "HDFC Bank", "ticker": "HDFCBANK.NS"},
        {"name": "ICICI Bank", "ticker": "ICICIBANK.NS"},
        {"name": "State Bank of India", "ticker": "SBIN.NS"},
        {"name": "Kotak Mahindra Bank", "ticker": "KOTAKBANK.NS"},
        {"name": "Axis Bank", "ticker": "AXISBANK.NS"},
        {"name": "Bajaj Finance", "ticker": "BAJFINANCE.NS"},
    ],
    "IT": [
        {"name": "Infosys", "ticker": "INFY.NS"},
        {"name": "TCS", "ticker": "TCS.NS"},
        {"name": "Wipro", "ticker": "WIPRO.NS"},
        {"name": "Tech Mahindra", "ticker": "TECHM.NS"},
        {"name": "HCL Technologies", "ticker": "HCLTECH.NS"},
    ],
    "Energy": [
        {"name": "Reliance Industries", "ticker": "RELIANCE.NS"},
        {"name": "ONGC", "ticker": "ONGC.NS"},
        {"name": "NTPC", "ticker": "NTPC.NS"},
        {"name": "Power Grid", "ticker": "POWERGRID.NS"},
        {"name": "Adani Power", "ticker": "ADANIPOWER.NS"},
        {"name": "Tata Power", "ticker": "TATAPOWER.NS"},
    ],
    "Automobiles": [
        {"name": "Tata Motors", "ticker": "TATAMOTORS.NS"},
        {"name": "Mahindra and Mahindra", "ticker": "M&M.NS"},
        {"name": "Maruti Suzuki", "ticker": "MARUTI.NS"},
        {"name": "Eicher Motors", "ticker": "EICHERMOT.NS"},
        {"name": "Bajaj Auto", "ticker": "BAJAJ-AUTO.NS"},
    ],
}

PEER_MAPPING = {
    "HDFCBANK.NS": ["ICICIBANK.NS", "SBIN.NS", "AXISBANK.NS", "KOTAKBANK.NS"],
    "ICICIBANK.NS": ["HDFCBANK.NS", "AXISBANK.NS", "KOTAKBANK.NS", "SBIN.NS"],
    "SBIN.NS": ["HDFCBANK.NS", "ICICIBANK.NS", "PNB.NS", "BANKBARODA.NS"],
    "INFY.NS": ["TCS.NS", "WIPRO.NS", "TECHM.NS", "HCLTECH.NS"],
    "TCS.NS": ["INFY.NS", "WIPRO.NS", "HCLTECH.NS", "TECHM.NS"],
    "RELIANCE.NS": ["ONGC.NS", "TATAPOWER.NS", "ADANIPOWER.NS"],
    "TATAMOTORS.NS": ["MARUTI.NS", "M&M.NS", "EICHERMOT.NS"],
}


# ======================================================================
# DATA FETCHING AND ANALYSIS FUNCTIONS (PITCH-PERFECT VERSION)
# ======================================================================

def fetch_logo(info):
    try:
        if 'logo_url' in info and info['logo_url']:
            response = requests.get(info['logo_url'], stream=True, timeout=5)
            if response.status_code == 200:
                return ImageReader(BytesIO(response.content))
    except Exception as e:
        print(f"Could not fetch logo: {e}")
    return None

def fetch_price(symbol, period="3y"):
    df = yf.download(symbol, period=period, interval="1d", progress=False, auto_adjust=True)
    return df if not df.empty else None

def compute_technical_indicators(df):
    if df is None: return None
    df['sma_50'] = df['Close'].rolling(window=50).mean()
    df['sma_200'] = df['Close'].rolling(window=200).mean()
    df['bb_mid'] = df['Close'].rolling(window=20).mean()
    df['bb_std'] = df['Close'].rolling(window=20).std()
    df['bb_upper'] = df['bb_mid'] + 2 * df['bb_std']
    df['bb_lower'] = df['bb_mid'] - 2 * df['bb_std']
    df['ema_12'] = df['Close'].ewm(span=12, adjust=False).mean()
    df['ema_26'] = df['Close'].ewm(span=26, adjust=False).mean()
    df['macd_line'] = df['ema_12'] - df['ema_26']
    df['macd_signal'] = df['macd_line'].ewm(span=9, adjust=False).mean()
    df['macd_hist'] = df['macd_line'] - df['macd_signal']
    delta = df['Close'].diff()
    gain = (delta.where(delta > 0, 0)).rolling(window=14).mean()
    loss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()
    rs = gain / loss.replace(0, 1e-9)
    df['rsi'] = 100 - (100 / (1 + rs))
    return df

def fetch_company_info(symbol):
    try:
        ticker = yf.Ticker(symbol)
        info = ticker.info
        unit_divisor = 1e7
        logo_image = fetch_logo(info)
        return {
            'info': info, 'logo_image': logo_image,
            'Symbol': symbol, 'Company Name': info.get('longName', 'N/A'),
            'Description': info.get('longBusinessSummary', 'N/A'),
            'Market Cap': f"₹{info.get('marketCap', 0) / unit_divisor:,.2f} Cr",
            'Current Price': f"₹{info.get('currentPrice', 'N/A')}",
            'Trailing PE': info.get('trailingPE'), 'Forward PE': info.get('forwardPE'),
            'Price/Book': info.get('priceToBook'),
            'ROE': info.get('returnOnEquity'),
            'Profit Margin': info.get('profitMargins'),
            'Debt to Equity': info.get('debtToEquity'),
            'Current Ratio': info.get('currentRatio'),
            'companyOfficers': info.get('companyOfficers', [])
        }
    except Exception as e:
        print(f"Error fetching fundamental data for {symbol}: {e}")
        return None

def fetch_news_yfinance(symbol, limit=8):
    news = []
    try:
        ticker = yf.Ticker(symbol)
        news_data = ticker.news
        for item in news_data[:limit]:
            news.append({'title': item.get('title', 'N/A'), 'publisher': item.get('publisher', 'N/A')})
    except Exception as e:
        print(f"Error fetching news from yfinance: {e}")
    return news

def get_peer_comparison(peers):
    peer_details = []
    for peer_symbol in peers:
        try:
            info = yf.Ticker(peer_symbol).info
            peer_details.append({
                'name': info.get('shortName', peer_symbol),
                'pe': info.get('trailingPE'),
                'roe': info.get('returnOnEquity')
            })
        except Exception:
            continue
    return pd.DataFrame(peer_details)

def interpret_technical(df):
    analysis = []
    if df is None or df.empty: return ["Technical data not available."]
    latest = df.iloc[-1]

    sma_50 = latest.get('sma_50')
    sma_200 = latest.get('sma_200')
    close_price = latest.get('Close')

    if pd.notna(sma_50) and pd.notna(sma_200):
        if sma_50 > sma_200:
            analysis.append("<b>Trend:</b> Bullish Signal (Golden Cross). The 50-day average is above the 200-day average.")
        else:
            analysis.append("<b>Trend:</b> Bearish Signal (Death Cross). The 50-day average is below the 200-day average.")
    # Add more interpretations as needed...
    return analysis

def interpret_fundamental(fundamentals):
    # Same as before
    analysis = []
    if fundamentals.get('Trailing PE'):
        pe = fundamentals['Trailing PE']
        valuation = "high" if pe > 30 else "low" if pe < 15 else "fair"
        analysis.append(f"<b>Valuation:</b> A P/E Ratio of {pe:.2f} suggests a {valuation} valuation.")
    if fundamentals.get('ROE'):
        roe = fundamentals['ROE']
        quality = "strong" if roe > 0.15 else "moderate"
        analysis.append(f"<b>Profitability:</b> A Return on Equity of {roe*100:.2f}% indicates {quality} efficiency.")
    if fundamentals.get('Debt to Equity'):
        de = fundamentals['Debt to Equity']
        risk = "high" if de > 150 else "manageable"
        analysis.append(f"<b>Financial Health:</b> Debt to Equity of {de:.2f} suggests {risk} risk.")
    return analysis


def generate_recommendation(fundamentals, tech_analysis):
    # Same as before
    score = 0
    if fundamentals.get('ROE') and fundamentals['ROE'] > 0.15: score += 1
    if fundamentals.get('Trailing PE') and fundamentals['Trailing PE'] < 30: score += 1
    if fundamentals.get('Debt to Equity') and fundamentals['Debt to Equity'] < 150: score += 1
    if any("Bullish" in s for s in tech_analysis): score += 1
    if any("Overbought" in s for s in tech_analysis): score -= 1
    if score >= 3: return "BUY"
    if score >= 1: return "HOLD"
    return "SELL"

# --- NEW: Function to draw a border on each page ---
def draw_border(canvas, doc):
    canvas.saveState()
    canvas.setStrokeColor(colors.HexColor('#000080')) # Navy Blue
    canvas.setLineWidth(2)
    canvas.rect(
        doc.leftMargin,
        doc.bottomMargin,
        doc.width,
        doc.height
    )
    canvas.restoreState()

def generate_pdf_report(fundamentals, price_df, news, peer_df, tech_analysis, fund_analysis, recommendation):
    stock_name = fundamentals.get('Symbol', 'STOCK')
    filename = f"{stock_name.replace('.', '_')}_Pro_Report_{datetime.now().strftime('%Y%m%d')}.pdf"
    filepath = os.path.join(OUTPUT_FOLDER, filename)

    # Pass the border function to the document template
    doc = SimpleDocTemplate(filepath, pagesize=A4, rightMargin=inch*0.75, leftMargin=inch*0.75, topMargin=inch*0.75, bottomMargin=inch*0.75)

    story = []
    styles = getSampleStyleSheet()
    styles.add(ParagraphStyle(name='Justify', alignment=TA_JUSTIFY, leading=14))

    # --- PDF Header with Logo ---
    logo_image = fundamentals.get('logo_image')
    title = Paragraph("Saketh Equity Research", styles['Title'])
    if logo_image:
        logo_image.drawWidth = 0.6*inch
        logo_image.drawHeight = 0.6*inch
        header_table = Table([[logo_image, title]], colWidths=[0.7*inch, 6.3*inch], style=[('VALIGN', (0,0), (-1,-1), 'MIDDLE')])
        story.append(header_table)
    else:
        story.append(title)

    story.append(Paragraph(f"Professional Report for: {fundamentals.get('Company Name', '')}", styles['h1']))
    story.append(Paragraph(f"Generated on: {datetime.now().strftime('%A, %B %d, %Y')}", styles['h2']))
    story.append(Spacer(1, 12))

    rec_color = {'BUY': colors.green, 'HOLD': colors.orange, 'SELL': colors.red}.get(recommendation, colors.black)
    rec_style = ParagraphStyle(name='Recommendation', parent=styles['h1'], alignment=TA_RIGHT, textColor=rec_color)
    header_data = [[Paragraph(f"<b>Current Price:</b> {fundamentals.get('Current Price', 'N/A')}<br/><b>Market Cap:</b> {fundamentals.get('Market Cap', 'N/A')}", styles['Normal']), Paragraph(recommendation, rec_style)]]
    story.append(Table(header_data, colWidths=[4*inch, 2.5*inch], style=[('VALIGN', (0,0), (-1,-1), 'MIDDLE')]))
    story.append(Spacer(1, 24))

    story.append(Paragraph("Company Overview", styles['h3']))
    story.append(Paragraph(fundamentals.get('Description', 'N/A'), styles['Justify']))
    story.append(Spacer(1, 12))

    # --- NEW: Key Managerial Personnel Section ---
    story.append(Paragraph("Key Managerial Personnel", styles['h3']))
    officers = fundamentals.get('companyOfficers', [])
    if officers:
        for officer in officers:
            if 'name' in officer and 'title' in officer:
                story.append(Paragraph(f"• <b>{officer['name']}</b>, <i>{officer['title']}</i>", styles['Normal']))
    else:
        story.append(Paragraph("Data not available.", styles['Normal']))
    story.append(Spacer(1, 24))

    # --- BLUE THEMED TABLES ---
    navy_blue_header_style = TableStyle([
        ('BACKGROUND', (0,0), (-1,0), colors.HexColor('#000080')), # Navy Blue Header
        ('TEXTCOLOR', (0,0), (-1,0), colors.whitesmoke),
        ('ALIGN', (0,0), (-1,-1), 'CENTER'),
        ('FONTNAME', (0,0), (-1,0), 'Helvetica-Bold'),
        ('FONTSIZE', (0,0), (-1,0), 10),
        ('BOTTOMPADDING', (0,0), (-1,0), 12),
        ('BACKGROUND', (0,1), (-1,-1), colors.HexColor("#f0f0f0")),
        ('GRID', (0,0), (-1,-1), 1, colors.black)
    ])

    analysis_data = [
        [Paragraph("<b>Technical Analysis Summary</b>", styles['Normal']), Paragraph("<b>Fundamental Analysis Summary</b>", styles['Normal'])],
        [Paragraph("<br/>".join([f"• {item}" for item in tech_analysis]), styles['Normal']), Paragraph("<br/>".join([f"• {item}" for item in fund_analysis]), styles['Normal'])]
    ]
    story.append(Table(analysis_data, colWidths=[3.25*inch, 3.25*inch], style=[('GRID', (0,0), (-1,-1), 1, colors.black), ('VALIGN', (0,0), (-1,-1), 'TOP'), ('LEFTPADDING', (0,0), (-1,-1), 6), ('BACKGROUND', (0,0), (-1,0), colors.HexColor('#000080')), ('TEXTCOLOR', (0,0), (-1,0), colors.whitesmoke)]))
    story.append(PageBreak())

    story.append(Paragraph("Technical Charts (3-Year)", styles['h3']))
    # Charting code remains the same as the last version...
    story.append(Spacer(1, 12))

    story.append(Paragraph("Key Financial Ratios", styles['h3']))
    ratios_data = [['Metric', 'Value'],
        ['Trailing P/E', f"{fundamentals.get('Trailing PE'):.2f}" if fundamentals.get('Trailing PE') else 'N/A'],
        ['Price/Book (P/B)', f"{fundamentals.get('Price/Book'):.2f}" if fundamentals.get('Price/Book') else 'N/A'],
        ['Return on Equity (ROE)', f"{fundamentals.get('ROE')*100:.2f}%" if fundamentals.get('ROE') else 'N/A'],
        ['Profit Margin', f"{fundamentals.get('Profit Margin')*100:.2f}%" if fundamentals.get('Profit Margin') else 'N/A'],
        ['Debt to Equity', f"{fundamentals.get('Debt to Equity'):.2f}" if fundamentals.get('Debt to Equity') else 'N/A'],
    ]
    story.append(Table(ratios_data, style=navy_blue_header_style, colWidths=[3.25*inch, 3.25*inch]))
    story.append(Spacer(1, 12))

    story.append(Paragraph("Peer Comparison", styles['h3']))
    if not peer_df.empty:
        peer_data = [['Company', 'P/E Ratio', 'Return on Equity (ROE)']]
        for index, row in peer_df.iterrows():
            peer_data.append([row['name'], f"{row['pe']:.2f}" if pd.notna(row['pe']) else 'N/A', f"{row['roe']*100:.2f}%" if pd.notna(row['roe']) else 'N/A'])
        story.append(Table(peer_data, style=navy_blue_header_style))
    else:
        story.append(Paragraph("No peer data available.", styles['Normal']))
    story.append(Spacer(1, 12))

    story.append(Paragraph("Recent News", styles['h3']))
    for n in news:
        story.append(Paragraph(f"• <b>{n['title']}</b> <i>({n['publisher']})</i>", styles['Normal']))

    # Build the document with the border function
    doc.build(story, onFirstPage=draw_border, onLaterPages=draw_border)
    return filename

# ======================================================================
# FLASK WEB ROUTES
# ======================================================================

def create_report(stock_ticker):
    symbol = stock_ticker
    fundamentals = fetch_company_info(symbol)
    if not fundamentals: raise ValueError(f"Could not get data for {symbol}.")
    price_df = fetch_price(symbol)
    if price_df is None: raise ValueError(f"Could not get price history for {symbol}.")

    price_df_tech = compute_technical_indicators(price_df)
    tech_analysis = interpret_technical(price_df_tech)
    fund_analysis = interpret_fundamental(fundamentals)
    recommendation = generate_recommendation(fundamentals, tech_analysis)

    peers = PEER_MAPPING.get(symbol, [])
    peer_df = get_peer_comparison(peers)
    news = fetch_news_yfinance(symbol)

    pdf_filename = generate_pdf_report(fundamentals, price_df, news, peer_df, tech_analysis, fund_analysis, recommendation)
    return pdf_filename

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/api/stocks')
def get_stocks():
    return jsonify(SECTOR_STOCK_MAPPING)

@app.route('/generate', methods=['POST'])
def generate():
    try:
        stock_ticker = request.form['stock_select']
        if not stock_ticker: return jsonify({'error': 'No stock selected.'}), 400
        pdf_filename = create_report(stock_ticker)
        return jsonify({'download_url': f"/download/{pdf_filename}"})
    except ValueError as e:
        return jsonify({'error': str(e)}), 400
    except Exception as e:
        print(f"An unexpected error occurred: {e}")
        return jsonify({'error': 'An internal server error occurred. Please try again later.'}), 500

@app.route('/download/<filename>')
def download_file(filename):
    return send_from_directory(OUTPUT_FOLDER, filename, as_attachment=True)

if __name__ == "__main__":
    app.run(debug=True)